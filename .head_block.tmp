      <div className="space-y-6">
        <div className="grid gap-6 items-start xl:grid-cols-[minmax(0,1fr)_minmax(540px,1.3fr)] xl:[&>*]:min-w-0">
          {/* Worker Selection and Input Form */}
          <Card className="h-full">
            <CardHeader>
              <div className="flex flex-col gap-1.5">
                <div className="flex items-center justify-between gap-3">
                  <h2 className="text-lg font-semibold text-gray-900 dark:text-white flex items-center">
                    <User
                      size={20}
                      className="mr-2 text-blue-600 dark:text-blue-400"
                    />
                    Selección de Trabajador
                  </h2>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={refreshWorkers}
                    disabled={isRefreshing}
                    leftIcon={
                      <RefreshCw
                        size={16}
                        className={isRefreshing ? "animate-spin" : ""}
                      />
                    }
                  >
                    Actualizar
                  </Button>
                </div>
                {lastFetchTime && (
                  <div className="inline-flex max-w-[255px] items-center rounded-xl border border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-800/80 px-3 py-1 text-sm text-gray-600 dark:text-gray-300">
                    Actualizado: {lastFetchTime.toLocaleString("es-ES")}
                  </div>
                )}
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              {/* Combined Search and Select */}
              {isLoading ? (
                <div className="flex items-center justify-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
                  <span className="ml-2 text-gray-600 dark:text-gray-400">
                    Cargando trabajadores...
                  </span>
                </div>
              ) : (
                <WorkerSearchSelect
                  workers={allWorkers}
                  selectedWorkerId={selectedWorkerId}
                  onWorkerSelect={setSelectedWorkerId}
                  placeholder="Buscar y seleccionar trabajador..."
                />
              )}

              {/* Selected Worker Info */}
              {selectedWorker && (
                <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-700">
                  <h3 className="font-medium text-blue-900 dark:text-blue-100 mb-2">
                    {selectedWorker.name}
                  </h3>
                  <div className="text-sm text-blue-700 dark:text-blue-300 space-y-2">
                    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                      <div className="space-y-1">
                        <div>
                          <span className="mr-1">Email:</span>
                          {selectedWorker.email ? (
                            <button
                              type="button"
                              onClick={() => {
                                void handleEmailCopy(selectedWorker.email);
                              }}
                              className="font-medium text-blue-800 dark:text-blue-200 underline hover:text-blue-900 dark:hover:text-blue-100"
                            >
                              {selectedWorker.email}
                            </button>
                          ) : (
                            "No disponible"
                          )}
                        </div>
                        {selectedWorker.secondaryEmail && (
                          <div>
                            <span className="mr-1">Email 2:</span>
                            <button
                              type="button"
                              onClick={() => {
                                void handleEmailCopy(
                                  selectedWorker.secondaryEmail
                                );
                              }}
                              className="font-medium text-blue-800 dark:text-blue-200 underline hover:text-blue-900 dark:hover:text-blue-100"
                            >
                              {selectedWorker.secondaryEmail}
                            </button>
                          </div>
                        )}
                        {copyFeedback?.type === "email" && (
                          <span className="ml-2 text-xs text-green-600 dark:text-green-300 inline-block">
                            {copyFeedback.message}
                            {copyFeedback.target
                              ? ` (${copyFeedback.target})`
                              : ""}
                          </span>
                        )}
                      </div>
                      {canLinkEmail && (
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          leftIcon={<Mail size={14} />}
                          onClick={openEmailClient}
                        >
                          Enviar email
                        </Button>
                      )}
                    </div>

                    <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                      <div>
                        <span className="mr-1">Teléfono:</span>
                        {selectedWorker.phone ? (
                          <button
                            type="button"
                            onClick={() => {
                              void handlePhoneCopy();
                            }}
                            className="font-medium text-blue-800 dark:text-blue-200 underline hover:text-blue-900 dark:hover:text-blue-100"
                          >
                            {selectedWorker.phone}
                          </button>
                        ) : (
                          "No disponible"
                        )}
                        {copyFeedback?.type === "phone" && (
                          <span className="ml-2 text-xs text-green-600 dark:text-green-300">
                            {copyFeedback.message}
                          </span>
                        )}
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {selectedWorkerTelHref && (
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            leftIcon={<Phone size={14} />}
                            onClick={openPhoneDialer}
                          >
                            Llamar
                          </Button>
                        )}
                        {selectedWorkerWhatsappHref && (
                          <Button
                            type="button"
                            variant="outline"
                            size="sm"
                            leftIcon={<MessageCircle size={14} />}
                            onClick={openWhatsAppConversation}
                          >
                            WhatsApp
                          </Button>
                        )}
                      </div>
                    </div>
                  </div>

                  {selectedWorker.companyNames &&
                    selectedWorker.companyNames.filter(
                      (name) =>
                        (selectedWorker.companyStats?.[name]?.contractCount ?? 0) > 0
                    ).length > 0 && (
                      <div className="mt-2 text-sm text-blue-700 dark:text-blue-300">
                        <span className="mr-1 text-blue-900 dark:text-blue-100">
                          Empresas asignadas:
                        </span>
                        <div className="mt-1 flex flex-wrap gap-2">
                          {selectedWorker.companyNames
                            .filter(
                              (name) =>
                                (selectedWorker.companyStats?.[name]?.contractCount ?? 0) > 0
                            )
                            .map((companyName) => {
                            const isActive = expandedCompany === companyName;
                            const companyStats =
                              selectedWorker.companyStats?.[companyName];
                            const contractCount =
                              companyStats?.contractCount ?? 0;
                            const assignmentCount =
                              companyStats?.assignmentCount ?? 0;
                            const hasContracts = contractCount > 0;
                            const isAssignmentOnly =
                              !hasContracts && assignmentCount > 0;

                            const inactiveClass = isAssignmentOnly
                              ? "border-amber-200 bg-amber-100 text-amber-800 hover:bg-amber-200 dark:border-amber-500/60 dark:bg-amber-900/30 dark:text-amber-200"
                              : "border-transparent bg-blue-100 text-blue-800 hover:bg-blue-200 dark:bg-blue-900/40 dark:text-blue-200 dark:hover:bg-blue-900/60";
                            const activeClass = isAssignmentOnly
                              ? "border-amber-500 bg-amber-500 text-white shadow-sm dark:border-amber-400 dark:bg-amber-500/80"
                              : "border-blue-600 bg-blue-600 text-white shadow-sm dark:border-blue-500 dark:bg-blue-500";

                            return (
                              <button
                                key={companyName}
                                type="button"
                                onClick={() =>
                                  setExpandedCompany((current) =>
                                    current === companyName ? null : companyName
                                  )
                                }
                                aria-pressed={isActive}
                                aria-expanded={isActive}
                                className={`flex items-center gap-1 rounded-full border px-3 py-1 text-xs font-medium transition focus:outline-none focus:ring-2 focus:ring-blue-300 dark:focus:ring-blue-500 ${
                                  isActive ? activeClass : inactiveClass
                                }`}
                              >
                                <span>{companyName}</span>
                                {hasContracts && (
                                  <span
                                    title={
                                      contractCount === 1
                                        ? "1 contrato"
                                        : `${contractCount} contratos`
                                    }
                                    className={`ml-1 inline-flex items-center justify-center rounded-full px-2 py-0.5 text-[10px] font-semibold uppercase tracking-wide ${
                                      isActive
                                        ? "bg-white/20 text-white"
                                        : "bg-blue-200 text-blue-800 dark:bg-blue-900/70 dark:text-blue-100"
                                    }`}
                                  >
                                    {contractCount}
                                  </span>
                                )}
                              </button>
                            );
                          })}
                        </div>

                        {expandedCompany && (
                          <div className="mt-3 rounded-lg border border-blue-200 bg-white/70 p-3 text-sm text-blue-900 shadow-sm dark:border-blue-700/80 dark:bg-blue-900/20 dark:text-blue-100">
                            <div className="mb-2 flex items-center justify-between">
                              <span className="font-semibold">
                                Contratos en {expandedCompany}
                              </span>
                              <button
                                type="button"
                                onClick={() => setExpandedCompany(null)}
                                className="text-xs text-blue-500 underline transition hover:text-blue-600 dark:text-blue-300 dark:hover:text-blue-200"
                              >
                                Cerrar
                              </button>
                            </div>
                            {expandedCompanyContracts.length === 0 ? (
                              <div className="rounded-md bg-blue-50 p-3 text-xs text-blue-700 dark:bg-blue-900/30 dark:text-blue-200">
                                No hay información de contratos para esta
                                empresa.
                              </div>
                            ) : (
                              <>
                                {expandedContractsWithContract.length > 0 && (
                                  <div className="space-y-3">
                                    {expandedContractsWithContract.map(
                                      (contract, index) => {
                                        const startDateText = formatMaybeDate(
                                          contract.startDate
                                        );
                                        const endDateText = formatMaybeDate(
                                          contract.endDate
                                        );
                                        const contractLabel = `Contrato ${
                                          index + 1
                                        }`;
                                        const contractTypeText =
                                          contract.position || contract.label;

                                        return (
                                          <div
                                            key={`${expandedCompany}-${contract.id}`}
                                            className="rounded-md border border-blue-100 bg-white/80 p-3 text-xs shadow-sm dark:border-blue-700/60 dark:bg-blue-900/40"
                                          >
                                            <div className="flex items-center justify-between">
                                              <span className="font-semibold">
                                                {contractLabel}
                                              </span>
                                              {contract.status && (
                                                <span className="ml-2 rounded-full bg-blue-100 px-2 py-1 text-[10px] font-medium uppercase tracking-wide text-blue-700 dark:bg-blue-800/70 dark:text-blue-200">
                                                  {contract.status}
                                                </span>
                                              )}
                                            </div>
                                            <div className="mt-2 space-y-1 text-blue-800 dark:text-blue-100">
                                              <div>
                                                <span className="font-medium">
                                                  Precio por hora:
                                                </span>{" "}
                                                {typeof contract.hourlyRate ===
                                                "number"
                                                  ? formatCurrency(
                                                      contract.hourlyRate
                                                    )
                                                  : "No especificado"}
                                              </div>
                                              {contractTypeText && (
                                                <div>
                                                  <span className="font-medium">
                                                    Contrato:
                                                  </span>{" "}
                                                  {contractTypeText}
                                                </div>
                                              )}
                                              {startDateText && (
                                                <div>
                                                  <span className="font-medium">
                                                    Inicio:
                                                  </span>{" "}
                                                  {startDateText}
                                                </div>
                                              )}
                                              {endDateText && (
                                                <div>
                                                  <span className="font-medium">
                                                    Fin:
                                                  </span>{" "}
                                                  {endDateText}
                                                </div>
                                              )}
                                              {contract.description && (
                                                <div>
                                                  <span className="font-medium">
                                                    Descripción:
                                                  </span>{" "}
                                                  {contract.description}
                                                </div>
                                              )}
                                            </div>
                                          </div>
                                        );
                                      }
                                    )}
                                  </div>
                                )}

                                {expandedContractCount === 0 &&
                                  expandedAssignmentCount > 0 && (
                                    <div className="rounded-md bg-blue-50 p-3 text-xs text-blue-700 dark:bg-blue-900/30 dark:text-blue-200">
                                      Esta empresa está asignada pero no tiene
                                      contrato asociado.
                                    </div>
                                  )}

                                {expandedContractCount > 0 &&
                                  expandedAssignmentCount > 0 && (
                                    <div className="rounded-md bg-blue-50 p-3 text-xs text-blue-700 dark:bg-blue-900/30 dark:text-blue-200">
                                      Además, hay {expandedAssignmentCount}{" "}
                                      {expandedAssignmentCount === 1
                                        ? "asignación"
                                        : "asignaciones"}{" "}
                                      sin contrato asociado.
                                    </div>
                                  )}
                              </>
                            )}
                          </div>
                        )}
                      </div>
                    )}

                  {selectedWorker.department && (
                    <p>Departamento: {selectedWorker.department}</p>
                  )}
                  {selectedWorker.position && (
                    <p>Posición: {selectedWorker.position}</p>
                  )}
                </div>
              )}

              {/* Calculation Form */}
              <div className="space-y-4 pt-4 border-t border-gray-200 dark:border-gray-700">
                <h3 className="font-medium text-gray-900 dark:text-white">
                  Datos para Cálculo
                </h3>

                <div className="rounded-lg border border-gray-200 bg-white shadow-sm dark:border-gray-700 dark:bg-gray-900/40">
                  <div className="flex items-center justify-between gap-3 px-4 py-3">
                    <button
                      type="button"
                      onClick={() =>
                        setIsContractInputsOpen((current) => !current)
                      }
                      className="flex min-w-0 flex-1 items-center justify-between gap-3 text-left transition hover:bg-gray-50 dark:hover:bg-gray-900/70 rounded-md px-1"
                    >
                      <div className="min-w-0">
                        <p className="font-medium text-gray-900 dark:text-white">
                          Horas y sueldos por contrato
                        </p>
                        <p className="mt-1 truncate text-sm text-gray-500 dark:text-gray-400">
                          {manualContractAggregates.hasEntries
                            ? `Total horas: ${formatHours(
                                manualContractAggregates.totalHours
                              )} · Total sueldo: ${formatCurrency(
                                manualContractAggregates.totalBaseAmount
                              )}`
                            : "Distribuye las horas y el sueldo base por empresa"}
                        </p>
                      </div>
                      <ChevronDown
                        size={18}
                        className={`shrink-0 text-gray-500 transition-transform dark:text-gray-300 ${
                          isContractInputsOpen ? "rotate-180" : ""
                        }`}
                      />
                    </button>
                    {(() => {
                      const groups = companyContractStructure.groups;
                      const allEnabled =
                        groups.length > 0 &&
                        groups.every((g) => Boolean(autoFillHoursMap[g.companyKey]));
                      return (
                        <label
                          className="inline-flex items-center gap-2 px-2 py-1 rounded-md border border-gray-300 dark:border-gray-600 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-800 text-sm text-gray-700 dark:text-gray-200"
                          title={allEnabled ? "Desactivar 'Usar registro' en todas" : "Activar 'Usar registro' en todas"}
                          onClick={(e) => e.stopPropagation()}
                        >
                          <input
                            type="checkbox"
                            className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                            aria-label="Usar registro en todas"
                            checked={allEnabled}
                            onChange={(e) => {
                              e.stopPropagation();
                              handleToggleAllAutoFill(e.target.checked);
                            }}
                          />
                          <span>Usar registro</span>
                        </label>
                      );
                    })()}
                  </div>
                  {isContractInputsOpen && (
                    <div className="border-t border-gray-200 dark:border-gray-700">
                      {companyContractStructure.groups.length === 0 ? (
                        <div className="px-4 py-6 text-sm text-gray-500 dark:text-gray-400">
                          No hay empresas asignadas al trabajador. Añade las
                          horas y sueldos manualmente cuando estén disponibles.
                        </div>
                      ) : (
                        <div className="space-y-4 px-4 py-5">
                          {companyContractStructure.groups.map((group) => {
                            const summary =
                              manualContractAggregates.companyList.find(
                                (company) =>
                                  (group.companyId &&
                                    company.companyId === group.companyId) ||
                                  company.companyName === group.companyName
                              );

                            const totalCompanyHours = summary?.hours ?? 0;
                            const totalCompanyBase = summary?.baseAmount ?? 0;
                            const isAutoFillEnabled = Boolean(
                              autoFillHoursMap[group.companyKey]
                            );
                            const calendarHoursForGroup =
                              getCalendarHoursForCompany(
                                group.companyId,
                                group.companyName
                              );
                            const isExpanded =
                              expandedCompanyInputs[group.companyKey] ?? false;

                            return (
                              <div
                                key={group.companyKey}
                                className="rounded-lg border border-gray-200 bg-white/90 shadow-sm dark:border-gray-700 dark:bg-gray-900/60"
                              >
                                <div className="border-b border-gray-200 px-3 py-1.5 dark:border-gray-700">
                                  <div className="flex flex-wrap items-center justify-between gap-2">
                                    <div className="flex flex-1 items-start gap-2">
                                      <button
                                        type="button"
                                        onClick={() =>
                                          handleCompanyGroupToggle(
                                            group.companyKey
                                          )
                                        }
                                        className="flex items-center justify-center rounded-full border border-gray-300 p-1 text-gray-500 transition hover:bg-gray-100 dark:border-gray-600 dark:text-gray-300 dark:hover:bg-gray-800"
                                        aria-expanded={isExpanded}
                                        aria-label={
                                          isExpanded
                                            ? "Contraer empresa"
                                            : "Expandir empresa"
                                        }
                                      >
                                        <ChevronDown
                                          size={16}
                                          className={`transition-transform ${
                                            isExpanded ? "rotate-180" : ""
                                          }`}
                                        />
                                      </button>
                                      <div className="min-w-0">
                                        <p className="text-sm font-semibold text-gray-900 dark:text-gray-100 leading-tight">
                                          {group.companyName}
                                        </p>
                                        {false && (
                                          <p className="text-[11px] text-gray-500 dark:text-gray-400 leading-tight">
                                            Define las horas y el sueldo para cada
                                            contrato asociado
                                          </p>
                                        )}
                                      </div>
                                    </div>
                                    <label className="flex items-center gap-1.5 text-sm font-medium text-gray-700 dark:text-gray-200">
                                      <input
                                        type="checkbox"
                                        className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                        checked={isAutoFillEnabled}
                                        onChange={(event) =>
                                          handleAutoFillHoursToggle(
                                            group,
                                            event.target.checked
                                          )
                                        }
                                      />
                                      <span>Usar registro</span>
                                    </label>
                                  </div>
                                  <div className="mt-1 flex flex-wrap items-center justify-between gap-2 text-[11px] text-gray-600 dark:text-gray-300">
                                    <span>Horas: {formatHours(totalCompanyHours)}</span>
                                    <span>Importe: {formatCurrency(totalCompanyBase)}</span>
                                  </div>
                                  <div className="mt-0.5 flex flex-wrap items-center justify-between gap-2 text-[11px] text-gray-500 dark:text-gray-400">
                                    <span>
                                      {calendarHoursForGroup > 0
                                        ? `Horas en calendario: ${formatHours(
                                            calendarHoursForGroup
                                          )}`
                                        : "Sin horas en el calendario"}
                                    </span>
                                    {isAutoFillEnabled && (
                                      <span className="font-medium text-blue-600 dark:text-blue-400">
                                        Auto completado
                                      </span>
                                    )}
                                  </div>
                                </div>

                                {isExpanded && (
                                  <div className="space-y-3 px-3 py-2.5">
                                    {group.entries.map((entry) => {
                                      const contractInput = calculationData
                                        .companyContractInputs[
                                        entry.contractKey
                                      ] ?? {
                                        hours: "",
                                        baseSalary: "",
                                      };
                                      const contractMeta =
                                        companyContractStructure.contractMap.get(
                                          entry.contractKey
                                        );

                                      return (
                                        <div
                                          key={entry.contractKey}
                                          className="rounded-md border border-dashed border-gray-300 p-2.5 dark:border-gray-600"
                                        >
                                          <div className="flex flex-wrap items-center justify-between gap-2">
                                            <div>
                                              <p className="text-sm font-semibold text-gray-900 dark:text-gray-100 leading-tight">
                                                {entry.label}
                                              </p>
                                              {entry.description && (
                                                <p className="text-[11px] text-gray-500 dark:text-gray-400 leading-tight">
                                                  {entry.description}
                                                </p>
                                              )}
                                            </div>
                                            {!entry.hasContract && (
                                              <span className="inline-flex items-center rounded-full bg-amber-100 px-2 py-0.5 text-[11px] font-semibold uppercase tracking-wide text-amber-700 dark:bg-amber-500/20 dark:text-amber-300">
                                                Sin contrato
                                              </span>
                                            )}
                                          </div>

                                          <div className="mt-2 grid grid-cols-1 gap-2 sm:grid-cols-3">
        <Input
          type="number"
          label="Horas"
          placeholder="0"
          value={contractInput.hours}
          size="sm"
          onChange={(event) =>
            handleContractInputChange(
              entry.contractKey,
              "hours",
              event.target.value
            )
          }
          min="0"
          step="0.25"
          fullWidth
        />
        <Input
          type="number"
          label="Precio/Hora (€)"
          placeholder="0"
          value={
            contractInput.hourlyRate ??
            (typeof contractMeta?.hourlyRate ===
            "number"
              ? String(
                  contractMeta.hourlyRate
                )
              : "")
          }
          size="sm"
          onChange={(event) =>
            handleContractInputChange(
              entry.contractKey,
              "hourlyRate",
              event.target.value
            )
          }
          step="0.01"
          fullWidth
        />
        <Input
          type="number"
          label="Sueldo base (€)"
          placeholder="0"
          value={contractInput.baseSalary}
          size="sm"
          onChange={(event) =>
            handleContractInputChange(
              entry.contractKey,
              "baseSalary",
              event.target.value
            )
          }
          step="0.01"
          fullWidth
        />
                                          </div>
                                        </div>
                                      );
                                    })}
                                  </div>
                                )}
                              </div>
                            );
                          })}
                        </div>
                      )}
                    </div>
                  )}
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Select
                    label="Período"
                    value={calculationData.period}
                    onChange={(value) =>
                      setCalculationData((prev) => ({
                        ...prev,
                        period: value as CalculationFormState["period"],
                      }))
                    }
                    options={[
                      { value: "monthly", label: "Mensual" },
                      { value: "weekly", label: "Semanal" },
                      { value: "daily", label: "Diario" },
                    ]}
                    fullWidth
                  />

                  <Input
                    type="number"
                    label="Horas Extra"
                    value={calculationData.overtimeHours}
                    onChange={(e) =>
                      setCalculationData((prev) => ({
                        ...prev,
                        overtimeHours: e.target.value,
                      }))
                    }
                    placeholder="0"
                    fullWidth
                  />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Input
                    type="number"
                    label="Bonificaciones (€)"
                    value={calculationData.bonuses}
                    onChange={(e) =>
                      setCalculationData((prev) => ({
                        ...prev,
                        bonuses: e.target.value,
                      }))
                    }
                    placeholder="0"
                    fullWidth
                  />

                  <Input
                    type="number"
                    label="Deducciones (€)"
                    value={calculationData.deductions}
                    onChange={(e) =>
                      setCalculationData((prev) => ({
                        ...prev,
                        deductions: e.target.value,
                      }))
                    }
                    placeholder="0"
                    fullWidth
                  />
                </div>

                <Input
                  label="Notas"
                  value={calculationData.notes}
                  onChange={(e) =>
                    setCalculationData((prev) => ({
                      ...prev,
                      notes: e.target.value,
                    }))
                  }
                  placeholder="Notas adicionales..."
                  fullWidth
                />

                <Button
                  onClick={handleCalculate}
                  disabled={
                    !selectedWorker ||
                    (!manualContractAggregates.hasEntries &&
                      (!calculationData.baseSalary ||
                        calculationData.baseSalary.trim().length === 0))
                  }
                  isLoading={isCalculating}
                  leftIcon={<Calculator size={18} />}
                  className="w-full"
                >
                  Calcular Sueldo
                </Button>
              </div>
            </CardContent>
          </Card>

          <div className="min-w-0 h-full">
            <WorkerHoursCalendar
              worker={selectedWorker}
              selectedMonth={calendarMonth}
              hoursByDate={calendarHours}
              onMonthChange={handleCalendarMonthChange}
              isLoading={isCalendarLoading}
            />
          </div>
        </div>

        {/* Results */}
        <Card>
          <CardHeader>
            <h2 className="text-lg font-semibold text-gray-900 dark:text-white flex items-center">
              <DollarSign
                size={20}
                className="mr-2 text-green-600 dark:text-green-400"
              />
              Resultados del Cálculo
            </h2>
          </CardHeader>
          <CardContent>
            {!results ? (
              <div className="text-center py-8">
                <Calculator size={48} className="mx-auto text-gray-400 mb-4" />
                <p className="text-gray-500 dark:text-gray-400">
                  Selecciona un trabajador y completa los datos para ver los
                  resultados
                </p>
              </div>
            ) : (
              <div className="space-y-4">
                {selectedWorker && (
                  <div className="text-center mb-6">
                    <h3 className="text-xl font-bold text-gray-900 dark:text-white">
                      {selectedWorker.name}
                    </h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400">
                      Cálculo{" "}
                      {calculationData.period === "monthly"
                        ? "mensual"
                        : calculationData.period === "weekly"
                        ? "semanal"
                        : "diario"}
                    </p>
                  </div>
                )}

                <div className="space-y-4">
                  <div className="flex items-center justify-between rounded-lg bg-green-50 p-3 dark:bg-green-900/20">
                    <div>
                      <span className="font-medium text-green-800 dark:text-green-300">
                        Importe calculado
                      </span>
                    </div>
                    <span className="text-xl font-bold text-green-900 dark:text-green-100">
                      {formatCurrency(results.totalAmount)}
                    </span>
                  </div>

                  <div className="space-y-2 border-t border-gray-200 pt-4 dark:border-gray-700">
                    <div className="flex items-center justify-between">
                      <h4 className="font-medium text-gray-900 dark:text-white">
                        Detalle por empresa
                      </h4>
                      <span className="text-xs text-gray-500 dark:text-gray-400">
                        {results.usesCalendarHours
                          ? "Horas provenientes del calendario del mes"
                          : "Horas distribuidas manualmente por contrato"}
                      </span>
                    </div>

                    {results.companyBreakdown.length === 0 ? (
                      <p className="text-sm text-gray-500 dark:text-gray-400">
                        No hay horas registradas para este período.
                      </p>
                    ) : (
                      <div className="overflow-hidden rounded-lg border border-gray-200 dark:border-gray-700">
                        <div className="grid grid-cols-3 gap-2 bg-gray-50 px-3 py-2 text-xs font-semibold uppercase tracking-wide text-gray-600 dark:bg-gray-800 dark:text-gray-300">
                          <span>Empresa</span>
                          <span className="text-right">Horas</span>
                          <span className="text-right">Importe</span>
                        </div>
                        {results.companyBreakdown.map((company) => (
                          <div
                            key={`${company.companyId ?? "sin"}-${
                              company.name ?? "empresa"
                            }`}
                            className="grid grid-cols-3 gap-2 border-t border-gray-100 px-3 py-2 text-sm dark:border-gray-700/70"
                          >
                            <span className="text-gray-700 dark:text-gray-200">
                              {company.name ?? "Sin empresa"}
                            </span>
                            <span className="text-right text-gray-700 dark:text-gray-200">
                              {formatHours(company.hours)}
                            </span>
                            <span className="text-right font-medium text-gray-900 dark:text-gray-100">
                              {formatCurrency(company.amount)}
                            </span>
                          </div>
                        ))}
                        <div className="grid grid-cols-3 gap-2 bg-gray-100 px-3 py-2 text-sm font-semibold text-gray-900 dark:bg-gray-800 dark:text-gray-100">
                          <span>Total</span>
                          <span className="text-right">
                            {formatHours(results.totalHours)}
                          </span>
                          <span className="text-right">
                            {formatCurrency(results.totalAmount)}
                          </span>
                        </div>
                      </div>
                    )}
                  </div>

                  <div className="mt-6 rounded-lg bg-gray-50 p-4 dark:bg-gray-800">
                    <h4 className="mb-3 font-medium text-gray-900 dark:text-white">
                      Resumen
                    </h4>
                    <div className="grid grid-cols-1 gap-4 text-sm sm:grid-cols-2">
                      <div>
                        <span className="text-gray-600 dark:text-gray-400">
                          Horas regulares:
                        </span>
                        <p className="font-medium text-gray-900 dark:text-gray-100">
                          {formatHours(results.regularHours)}
                        </p>
                      </div>
                      <div>
                        <span className="text-gray-600 dark:text-gray-400">
                          Horas extra:
                        </span>
                        <p className="font-medium text-gray-900 dark:text-gray-100">
                          {formatHours(results.overtimeHours)}
                        </p>
                      </div>
                      <div>
                        <span className="text-gray-600 dark:text-gray-400">
                          Horas totales:
                        </span>
                        <p className="font-medium text-gray-900 dark:text-gray-100">
                          {formatHours(results.totalHours)}
                        </p>
                      </div>
                      <div>
                        <span className="text-gray-600 dark:text-gray-400">
                          Importe total:
                        </span>
                        <p className="font-medium text-gray-900 dark:text-gray-100">
                          {formatCurrency(results.totalAmount)}
                        </p>
                      </div>
                      <div>
                        <span className="text-gray-600 dark:text-gray-400">
                          Período:
                        </span>
                        <p className="font-medium capitalize text-gray-900 dark:text-gray-100">
                          {calculationData.period === "monthly"
                            ? "Mensual"
                            : calculationData.period === "weekly"
                            ? "Semanal"
                            : "Diario"}
                        </p>
                      </div>
                      <div>
                        <span className="text-gray-600 dark:text-gray-400">
                          Fecha:
                        </span>
                        <p className="font-medium text-gray-900 dark:text-gray-100">
                          {formatDate(new Date().toISOString())}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

